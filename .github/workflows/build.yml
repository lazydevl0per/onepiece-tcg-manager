name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

# Add permissions at the workflow level
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Test data loading
      run: npm run test-data

    - name: Verify data files are present
      shell: powershell
      run: |
        echo "Checking dist-electron/data directory structure..."
        if (Test-Path "dist-electron/data/english/json") {
          $jsonFiles = Get-ChildItem "dist-electron/data/english/json" -Filter "*.json"
          echo "Found $($jsonFiles.Count) JSON files in dist-electron/data/english/json"
          $jsonFiles | ForEach-Object { echo "  - $($_.Name)" }
        } else {
          echo "ERROR: dist/data-electron/english/json directory not found!"
          exit 1
        }

    - name: Build Electron app
      run: npx electron-builder --win --publish=never
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List release directory
      shell: powershell
      run: |
        echo "Release directory contents:"
        if (Test-Path "release/") {
          Get-ChildItem -Path "release/" -Force
        } else {
          echo "Release directory not found"
        }
        $executables = Get-ChildItem -Recurse -Include "*.exe", "*.dmg", "*.AppImage", "*.deb" -ErrorAction SilentlyContinue
        if ($executables) {
          $executables | ForEach-Object { $_.FullName }
        } else {
          echo "No executables found"
        }

    - name: Upload installer and update metadata artifacts
      uses: actions/upload-artifact@v4
      with:
        name: one-piece-tcg-manager-installers-windows
        path: |
          release/*.exe
          release/*.zip
          release/*.yml
        retention-days: 30
        if-no-files-found: error

  release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Download Windows installer and update metadata artifacts
      uses: actions/download-artifact@v4
      with:
        name: one-piece-tcg-manager-installers-windows
        path: installers/windows
    
    - name: Patch latest.yml for GitHub asset naming (spaces and dashes to dots, only for referenced file)
      run: |
        # Extract the referenced installer filename from latest.yml
        installer_with_spaces=$(grep '^path:' installers/windows/latest.yml | head -n1 | cut -d' ' -f2-)
        # Convert spaces to dots
        installer_with_dots="${installer_with_spaces// /"."}"
        # Convert dashes to dots
        installer_with_dots="${installer_with_dots//-/"."}"
        # Patch both 'path:' and 'url:' fields in latest.yml
        sed -i "s|$installer_with_spaces|$installer_with_dots|g" installers/windows/latest.yml
        echo "Patched latest.yml: replaced '$installer_with_spaces' with '$installer_with_dots'"

    - name: List downloaded installers and update metadata
      run: |
        echo "Downloaded installers and update metadata:"
        find installers -type f -name "*.exe" -o -name "*.zip" -o -name "*.yml" || echo "No files found"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          installers/windows/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 