name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

# Add permissions at the workflow level
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Copy card data
      run: node scripts/copy-data.js

    - name: Build application
      run: npm run build

    - name: Test data loading
      run: npm run test-data

    - name: Verify data files are present
      shell: powershell
      run: |
        echo "Checking dist/data directory structure..."
        if (Test-Path "dist/data/data/english/json") {
          $jsonFiles = Get-ChildItem "dist/data/data/english/json" -Filter "*.json"
          echo "Found $($jsonFiles.Count) JSON files in dist/data/data/english/json"
          $jsonFiles | ForEach-Object { echo "  - $($_.Name)" }
        } else {
          echo "ERROR: dist/data/data/english/json directory not found!"
          exit 1
        }
        
        if (Test-Path "dist/data/data/english/images") {
          $imageFiles = Get-ChildItem "dist/data/data/english/images" -Filter "*.png"
          echo "Found $($imageFiles.Count) PNG files in dist/data/data/english/images"
        } else {
          echo "ERROR: dist/data/data/english/images directory not found!"
          exit 1
        }

    - name: Build Electron app
      run: electron-builder --publish=never
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List release directory (Windows)
      shell: powershell
      run: |
        echo "Release directory contents:"
        if (Test-Path "release/") {
          Get-ChildItem -Path "release/" -Force
        } else {
          echo "Release directory not found"
        }
        $executables = Get-ChildItem -Recurse -Include "*.exe", "*.dmg", "*.AppImage", "*.deb" -ErrorAction SilentlyContinue
        if ($executables) {
          $executables | ForEach-Object { $_.FullName }
        } else {
          echo "No executables found"
        }

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: one-piece-tcg-manager-installers
        path: |
          release/*.exe
          release/*.dmg
          release/*.AppImage
          release/*.deb
          release/*.zip
        retention-days: 30
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    # Add specific permissions for the release job
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download installer artifacts
      uses: actions/download-artifact@v4
      with:
        name: one-piece-tcg-manager-installers
        path: installers

    - name: List downloaded installers
      run: |
        echo "Downloaded installers:"
        find installers -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.zip" || echo "No installers found"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: installers/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 